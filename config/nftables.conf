#!/usr/sbin/nft -f
# check nf_tables: lsmod |grep nf_tables
# disable iptables: iptables -F && ip6tables -F

# start by flushing all rules
flush ruleset

# ===== setup vars =====
define intf_lookback = lo
define intf_internet = enp1s0  # need to change per machine
define ip_external = 192.168.2.2
define subnet_external = 192.168.0.0/16
define net_loopback = 127.0.0.0/8
define net_class_a = 10.0.0.0/8
define net_class_b = 172.16.0.0/16
define net_class_c = 192.168.0.0/16
define net_class_d = 224.0.0.0/4
define net_class_e = 240.0.0.0/5
define net_class_docker = 172.17.0.0/16
define broadcast_src = 0.0.0.0
define broadcast_dest = 255.255.255.255
define nameserver_1 = 192.168.2.1  # for dns
define nameserver_2 = 192.168.2.1
define server_smtp = 192.168.2.1   # for mail smtp
define ports_priv = 0-1023
define ports_unpriv = 1024-65535
define ports_ssh = 22  # ssh server, may need to change
define ports_tcp_wlan = {
	http,
	https
}
define ports_tcp_lan = {
	3000, # dev server
	8080, # for speed test
	139,  # samba
	445,  # samba
	9091, # transmission web
	3306, # mysql
	5432, # postgres
	6379  # redis
}
define ports_udp_wlan = {
	openvpn
}
define ports_udp_lan = {
	openvpn
}

# ===== setup tables with default policy  =====
table inet filter {
	chain input {
		type filter hook input priority 0;
		policy drop;   # drop by default

		tcp dport $ports_ssh accept;  # special port
	}
	chain forward {
		type filter hook output priority 0;
	}
	chain output {
		type filter hook output priority 0;
		policy drop;   # drop by default
	}
}
table ip nat {
	chain prerouting {
		type nat hook prerouting priority 0;
	}
	chain postrouting {
		type nat hook postrouting priority 100;
	}
}
# ===== localhost proxy =====
table inet filter {
	chain input {
		iifname $intf_lookback accept;
	}
	chain output {
		oifname $intf_lookback accept;
	}
}
# ===== connection state proxy =====
table inet filter {
	chain input {
		ct state { established, related } accept;
		# early drop of invalid connection
		ct state invalid log prefix "[nftables] INVALID input: " limit rate 3/second drop;
	}
	chain forward {
		ct state { established, related } accept;
		ct state invalid log prefix "[nftables] INVALID forward: " limit rate 3/second drop;
	}
	chain output {
		ct state { established, related } accept;
		ct state invalid log prefix "[nftables] INVALID output: " limit rate 3/second drop;
	}
}
# ===== invalid proxy =====
table inet filter {
	chain input {
		#iif $intf_internet ip saddr $ip_external drop;
		iif $intf_internet ip saddr $net_class_a drop;
		iif $intf_internet ip saddr $net_class_b drop;
		#iif $intf_internet ip saddr $net_class_c drop;
		iif $intf_internet ip protocol udp ip daddr $net_class_d accept;
		#iif $intf_internet ip saddr $net_class_e drop;
		#iif $intf_internet ip saddr $net_class_docker drop;
		#iif $intf_internet ip saddr $net_loopback drop;
		#iif $intf_internet ip saddr $subnet_external drop;
	}
}

# ===== dns proxy =====
table inet filter {
	chain input {
		ip saddr { $nameserver_1, $nameserver_2 } udp sport 53 udp dport 53  accept;
		ip saddr { $nameserver_1, $nameserver_2 } tcp sport 53 tcp dport $ports_unpriv accept;
		ip saddr { $nameserver_1, $nameserver_2 } udp sport 53 udp dport $ports_unpriv accept;
	}
	chain output {
		ip daddr { $nameserver_1, $nameserver_2 } udp sport 53 udp dport 53 accept;
		ip daddr { $nameserver_1, $nameserver_2 } tcp sport $ports_unpriv tcp dport 53 accept;
		ip daddr { $nameserver_1, $nameserver_2 } udp sport $ports_unpriv udp dport 53 accept;
	}
}
# ===== tcp client proxy =====
table inet filter {
	chain output {
		# speedtest client
		tcp dport {8080} tcp sport $ports_unpriv accept;
		# accept tcp server connect to outside
		tcp dport {21,22,80,443} tcp sport $ports_unpriv accept;
		# smtp client
		ip daddr $server_smtp tcp dport 25 tcp sport $ports_unpriv accept;
	}
}
# ===== tcp server proxy =====
table inet filter {
	chain input {
		tcp sport $ports_unpriv tcp dport $ports_tcp_wlan ct state new accept;
		tcp sport $ports_unpriv tcp dport $ports_tcp_lan ip saddr $net_class_c accept;
		udp sport $ports_unpriv udp dport $ports_udp_wlan ct state new accept;
		udp sport $ports_unpriv udp dport $ports_udp_lan ip saddr $net_class_c accept;
	}
}
# ===== icmp proxy =====
table inet filter {
	chain input {
		# accept ping from outside with rate limit
		ip protocol icmp icmp type echo-request limit rate over 1/second burst 5 packets drop;
		ip6 nexthdr icmpv6 icmpv6 type echo-request limit rate over 1/second burst 5 packets drop;
		ip protocol icmp icmp type echo-request ct state new accept;
		ip6 nexthdr icmpv6 icmpv6 type echo-request ct state new accept;
		
		# accept ping to outside
		icmp type { echo-reply,destination-unreachable,parameter-problem,source-quench,time-exceeded } accept;
	}
	chain output {
		# accept ping to outside
		icmp type { echo-request,parameter-problem,source-quench } accept;
	}
}
# ===== docker proxy =====
table inet filter {
	chain input {
		#ip saddr $net_class_docker accept;
	}
	chain output {
		#ip saddr $net_class_docker oif $intf_internet accept;
	}
}
table ip nat {
	chain prerouting {
		iif $intf_internet tcp dport 80 dnat 172.20.1.80:8080;
	}
	chain postrouting {
		ip saddr $net_class_docker oif $intf_internet masquerade;
	}
}

# ===== log proxy =====
# log message at the end
table inet filter {
	chain input {
		# log prefix "[nftables] INPUT packet dropped: " limit rate 3/second;
	}
	chain forward {
		# log prefix "[nftables] FORWARD packet dropped: " limit rate 3/second;
	}
	chain output {
		# log prefix "[nftables] OUTPUT packet dropped: " limit rate 3/second;
	}
}

# view logs
# sudo tail /var/log/syslog -n 500 |grep nftables
